{"remainingRequest":"/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/Home.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/app/src/components/Home.vue","mtime":1577642771160},{"path":"/app/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi53aWRnZXQtbGluayB7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgY29sb3I6IzAwZDFiMiAhaW1wb3J0YW50Owp9Cgoud2lkZ2V0LWxpbms6aG92ZXIgewogYmFja2dyb3VuZC1jb2xvcjogIzMyMzIzMyAhaW1wb3J0YW50Owp9Cgoud2lkZ2V0LWxpbms6YWZ0ZXIgewogIGNvbnRlbnQ6ICIrIjsKICBmbG9hdDogcmlnaHQ7Cn0KCi53aWRnZXQgewogIHBhZGRpbmc6IDIwcHg7CiAgbWFyZ2luLXRvcDogMjBweCAhaW1wb3J0YW50Owp9CgouYm9yZGVyIHsKICBib3JkZXI6IDFweCBzb2xpZCAjNDA0MDQwOwp9Cgo="},{"version":3,"sources":["Home.vue"],"names":[],"mappingsfile":"Home.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"columns bg-2\" style=\"min-height: 94vh; margin-top: inherit;\">\n    <div class=\"column is-3\" style=\"border-right: 1px solid #404040;\">\n      <aside class=\"menu has-text-white\" style=\"padding: 15px;\">\n        <p class=\"menu-label has-text-white\">\n          Services disponibles\n        </p>\n        <div v-if=\"authToken !== 0\">\n          <ul class=\"menu-list\">\n            <li>\n              <span>Spotify</span>\n              <button v-if=\"spotifyToken === 0\" class=\"is-pulled-right button-light\" style=\"margin-top: -0.5rem;\" @click=\"loginSpotify()\">Se connecter</button>\n              <button v-if=\"spotifyToken !== 0\" class=\"is-pulled-right button-dark\" style=\"margin-top: -0.5rem;\" @click=\"logoutSpotify()\">Déconnecter</button>\n              <ul>\n                <li><a class=\"widget-link\" @click=\"toggleSpotifyLastSongs()\">Dernières sorties d'un artiste</a></li>\n                <li><a class=\"widget-link\" @click=\"toggleSpotifyTopTracks()\">Meilleurs morceaux d'un artiste</a></li>\n                <li><a class=\"widget-link\" @click=\"toggleSpotifyRelatedArtists()\">Artistes associés à un artiste</a></li>\n              </ul>\n            </li>\n            <li>\n              <span>Deezer</span>\n              <button v-if=\"deezerToken === 0\" class=\"is-pulled-right button-light\" style=\"margin-top: -0.5rem;\" @click=\"loginDeezer()\">Se connecter</button>\n              <button v-if=\"deezerToken !== 0\" class=\"is-pulled-right button-dark\" style=\"margin-top: -0.5rem;\" @click=\"logoutDeezer()\">Déconnecter</button>\n              <ul>\n                <li><a class=\"widget-link\" @click=\"toggleDeezerLastSongs()\">Dernières sorties d'un artiste</a></li>\n                <li><a class=\"widget-link\" @click=\"toggleDeezerTopTracks()\">Meilleurs morceaux d'un artiste</a></li>\n                <li><a class=\"widget-link\" @click=\"toggleDeezerRelatedArtists()\">Artistes associés à un artiste</a></li>\n              </ul>\n            </li>\n          </ul>\n        </div>\n        <div class=\"notification bg-1 border\" v-if=\"authToken === 0\">\n          <p class=\"title is-6 color-3\">Veuillez-vous connecter pour ajouter des widgets.</p>\n        </div>\n        <p class=\"menu-label has-text-white\">\n          Mes widgets\n        </p>\n        <ul class=\"menu-list\">\n          <li>\n            <div v-for=\"widget in widgets\" :key=\"widget.id\" class=\"notification bg-1 border\">\n                <span class=\"color-3\"><b>{{ widget.name }}</b> - {{ widget.type }}</span>\n                <div class=\"dropdown is-hoverable is-pulled-right\">\n                  <div class=\"dropdown-trigger\">\n                    <button class=\"button is-small\" aria-haspopup=\"true\" aria-controls=\"dropdown-menu3\" style=\"background: inherit; color: white; margin-top: -0.2rem;\">\n                      <span class=\"icon is-small\">\n                        <i class=\"fas fa-angle-down\" aria-hidden=\"true\"></i>\n                      </span>\n                    </button>\n                  </div>\n                  <div class=\"dropdown-menu\" id=\"dropdown-menu3\" role=\"menu\">\n                    <div class=\"dropdown-content\">\n                      <a href=\"#\" class=\"dropdown-item\" @click=\"modifyWidget(widget)\">Modifier</a>\n                      <a href=\"#\" class=\"dropdown-item\" @click=\"moveUpWidget(widget)\">Monter</a>\n                      <a href=\"#\" class=\"dropdown-item\" @click=\"moveDownWidget(widget)\">Descendre</a>\n                      <a href=\"#\" class=\"dropdown-item\" @click=\"deleteWidget(widget)\">Supprimer</a>\n                    </div>\n                  </div>\n                </div>\n            </div>\n          </li>\n        </ul>\n      </aside>\n    </div>\n    <div class=\"column is-9\">\n      <div v-for=\"widget in widgets\" :key=\"widget.id\" class=\"container bg-1 border widget\">\n        <SpotifyLastSongs :id=\"widget.data\" :name=\"widget.name\" :token=\"spotifyToken.toString()\" v-if=\"widget.type === 'spotifyLastSongs'\" />\n        <SpotifyTopTracks :id=\"widget.data\" :name=\"widget.name\" :token=\"spotifyToken.toString()\" v-if=\"widget.type === 'spotifyTopTracks'\" />\n        <SpotifyRelatedArtists :id=\"widget.data\" :name=\"widget.name\" :token=\"spotifyToken.toString()\" v-if=\"widget.type === 'spotifyRelatedArtists'\" />\n        <DeezerLastSongs :id=\"widget.data.toString()\" :name=\"widget.name\" v-if=\"widget.type === 'deezerLastSongs'\" />\n        <DeezerTopTracks :id=\"widget.data.toString()\" :name=\"widget.name\" v-if=\"widget.type === 'deezerTopTracks'\" />\n        <DeezerRelatedArtists :id=\"widget.data.toString()\" :name=\"widget.name\" v-if=\"widget.type === 'deezerRelatedArtists'\" />\n      </div>\n    </div>\n    <SpotifyLastSongsConfig :config=\"configWidgetId\" :token=\"spotifyToken.toString()\" :state=\"spotifyLastSongsState\" @update-state=\"updateSpotifyLastSongs\" />\n    <SpotifyTopTracksConfig :config=\"configWidgetId\" :token=\"spotifyToken.toString()\" :state=\"spotifyTopTracksState\" @update-state=\"updateSpotifyTopTracks\" />\n    <SpotifyRelatedArtistsConfig :config=\"configWidgetId\" :token=\"spotifyToken.toString()\" :state=\"spotifyRelatedArtistsState\" @update-state=\"updateSpotifyRelatedArtists\" />\n    <DeezerLastSongsConfig :config=\"configWidgetId\" :state=\"deezerLastSongsState\" @update-state=\"updateDeezerLastSongs\" />\n    <DeezerTopTracksConfig :config=\"configWidgetId\" :state=\"deezerTopTracksState\" @update-state=\"updateDeezerTopTracks\" />\n    <DeezerRelatedArtistsConfig :config=\"configWidgetId\" :state=\"deezerRelatedArtistsState\" @update-state=\"updateDeezerRelatedArtists\" />\n  </div>\n</template>\n\n<script>\nimport SpotifyLastSongsConfig from './SpotifyLastSongsConfig';\nimport SpotifyLastSongs from './SpotifyLastSongs';\nimport SpotifyTopTracksConfig from './SpotifyTopTracksConfig';\nimport SpotifyTopTracks from './SpotifyTopTracks';\nimport SpotifyRelatedArtistsConfig from './SpotifyRelatedArtistsConfig';\nimport SpotifyRelatedArtists from './SpotifyRelatedArtists';\nimport DeezerLastSongsConfig from './DeezerLastSongsConfig';\nimport DeezerLastSongs from './DeezerLastSongs';\nimport DeezerTopTracksConfig from './DeezerTopTracksConfig';\nimport DeezerTopTracks from './DeezerTopTracks';\nimport DeezerRelatedArtistsConfig from './DeezerRelatedArtistsConfig';\nimport DeezerRelatedArtists from './DeezerRelatedArtists';\n\nclass Widget {\n\n  constructor(type, data, name, id) {\n    if (id === 0) {\n      this.id = this.uuidv4();\n    } else {\n      this.id = id;\n    }\n    this.type = type;\n    this.name = name;\n    this.data = data;\n  }\n\n  uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n}\n\nexport default {\n  name: 'home',\n  components: {\n    SpotifyLastSongsConfig,\n    SpotifyLastSongs,\n    SpotifyTopTracksConfig,\n    SpotifyTopTracks,\n    SpotifyRelatedArtistsConfig,\n    SpotifyRelatedArtists,\n    DeezerLastSongsConfig,\n    DeezerLastSongs,\n    DeezerTopTracksConfig,\n    DeezerTopTracks,\n    DeezerRelatedArtistsConfig,\n    DeezerRelatedArtists\n  },\n  created() {\n    var urlObject = (new URL(window.location.href)).searchParams;\n    var urlParams = this.getUrlVars();\n\n    if (this.authToken !== 0 && urlObject.get('spotify') === \"true\" && urlParams.access_token && this.spotifyToken === 0) {\n      this.axios.post(`http://localhost:8080/login/spotify?auth_token=${this.authToken}&spotify_token=${urlParams.access_token}/`)\n      .then((response) => {\n          localStorage.setItem('spotifyToken-' + this.authToken, urlParams.access_token);\n          this.$forceUpdate();\n      })\n    }\n    if (this.authToken !== 0 && urlObject.get('deezer') === \"true\" && urlParams.access_token && this.deezerToken === 0) {\n      this.axios.post(`http://localhost:8080/login/deezer?auth_token=${this.authToken}&deezer_token=${urlParams.access_token}/`)\n      .then((response) => {\n          localStorage.setItem('deezerToken-' + this.authToken, urlParams.access_token);\n          this.$forceUpdate();\n      })\n    }\n    if (this.authToken !== 0) {\n      this.axios.post(`http://localhost:8080/list/widget?auth_token=${this.authToken}`)\n      .then((response) => {\n        response.data.forEach(widget => {\n          this.widgets.unshift(new Widget(widget.type, widget.data, widget.name, widget.id));\n        });\n      });\n    }\n  },\n  data() {\n    return {\n      spotifyLastSongsState: '',\n      spotifyTopTracksState: '',\n      spotifyRelatedArtistsState: '',\n      deezerLastSongsState: '',\n      deezerTopTracksState: '',\n      deezerRelatedArtistsState: '',\n      configWidgetId: '',\n      widgets: [],\n      get authToken() {\n        return localStorage.getItem('authToken') || 0;\n      },\n      set authToken(value) {\n        localStorage.setItem('authToken', value);\n      },\n      get spotifyToken() {\n        return localStorage.getItem('spotifyToken-' + this.authToken) || 0;\n      },\n      set spotifyToken(value) {\n        localStorage.setItem('spotifyToken-' + this.authToken, value);\n      },\n      get deezerToken() {\n        return localStorage.getItem('deezerToken-' + this.authToken) || 0;\n      },\n      set deezerToken(value) {\n        localStorage.setItem('deezerToken-' + this.authToken, value);\n      }\n    }\n  },\n  methods: {\n    //\n    //  Login / Logout from Spotify+Deezer\n    //\n    loginSpotify() {\n      window.location.href = `https://accounts.spotify.com/authorize?client_id=1db60673fcf648a189dfac04beb7d735&redirect_uri=`\n      + encodeURI(\"https://localhost:3000?spotify=true\") + `&response_type=token`;\n    },\n    logoutSpotify() {\n      localStorage.removeItem('spotifyToken-' + this.authToken);\n      this.$forceUpdate();\n    },\n    loginDeezer() {\n      window.location.href = `https://connect.deezer.com/oauth/auth.php?app_id=386784&redirect_uri=`\n      + encodeURI(\"https://localhost:3000?deezer=true\") + `&perms=basic_access,email&response_type=token`;\n    },\n    logoutDeezer() {\n      localStorage.removeItem('deezerToken-' + this.authToken);\n      this.$forceUpdate();\n    },\n    //\n    //  Utilities\n    //\n    getUrlVars() {\n      var vars = {};\n      var parts = this.$route.path.replace(/[/?&]+([^=&]+)=([^&]*)/gi, function(m,key,value, value2) {\n          vars[key] = value;\n      });\n      return vars;\n    },\n    //\n    //  Widget's communication with configuration modal\n    //\n    toggleSpotifyLastSongs() {\n      if (this.spotifyToken === 0) {\n        return;\n      }\n      this.spotifyLastSongsState = 'is-active';\n    },\n    updateSpotifyLastSongs(res) {\n      this.configWidgetId = '';\n      this.spotifyLastSongsState = res.state;\n      if (res.id !== \"none\" && res.config === '') {\n        var widget = new Widget('spotifyLastSongs', res.id, res.name, 0);\n\n        this.widgets.unshift(widget);\n        this.axios.post(`http://localhost:8080/register/widget?auth_token=${this.authToken}&widget_id=${widget.id}&widget_type=${widget.type}&widget_name=${widget.name}&widget_data=${widget.data}`);\n      }\n      if (res.id !== 'none' && res.config !== '') {\n        var x = this.widgets.map(function(e) { return e.id; }).indexOf(res.config);\n\n        this.widgets[x].data = res.id;\n        this.widgets[x].name = res.name;\n        this.axios.post(`http://localhost:8080/register/widget?auth_token=${this.authToken}&widget_id=${this.widgets[x].id}&widget_type=${this.widgets[x].type}&widget_name=${this.widgets[x].name}&widget_data=${this.widgets[x].data}`);\n      }\n    },\n    toggleSpotifyTopTracks() {\n      if (this.spotifyToken === 0) {\n        return;\n      }\n      this.spotifyTopTracksState = 'is-active';\n    },\n    updateSpotifyTopTracks(res) {\n      this.configWidgetId = '';\n      this.spotifyTopTracksState = res.state;\n      if (res.id !== \"none\" && res.config === '') {\n        var widget = new Widget('spotifyTopTracks', res.id, res.name, 0);\n\n        this.widgets.unshift(widget);\n        this.axios.post(`http://localhost:8080/register/widget?auth_token=${this.authToken}&widget_id=${widget.id}&widget_type=${widget.type}&widget_name=${widget.name}&widget_data=${widget.data}`);\n      }\n      if (res.id !== 'none' && res.config !== '') {\n        var x = this.widgets.map(function(e) { return e.id; }).indexOf(res.config);\n\n        this.widgets[x].data = res.id;\n        this.widgets[x].name = res.name;\n        this.axios.post(`http://localhost:8080/register/widget?auth_token=${this.authToken}&widget_id=${this.widgets[x].id}&widget_type=${this.widgets[x].type}&widget_name=${this.widgets[x].name}&widget_data=${this.widgets[x].data}`);\n      }\n    },\n    toggleSpotifyRelatedArtists() {\n      if (this.spotifyToken === 0) {\n        return;\n      }\n      this.spotifyRelatedArtistsState = 'is-active';\n    },\n    updateSpotifyRelatedArtists(res) {\n      this.configWidgetId = '';\n      this.spotifyRelatedArtistsState = res.state;\n      if (res.id !== \"none\" && res.config === '') {\n        var widget = new Widget('spotifyRelatedArtists', res.id, res.name, 0);\n\n        this.widgets.unshift(widget);\n        this.axios.post(`http://localhost:8080/register/widget?auth_token=${this.authToken}&widget_id=${widget.id}&widget_type=${widget.type}&widget_name=${widget.name}&widget_data=${widget.data}`);\n      }\n      if (res.id !== 'none' && res.config !== '') {\n        var x = this.widgets.map(function(e) { return e.id; }).indexOf(res.config);\n\n        this.widgets[x].data = res.id;\n        this.widgets[x].name = res.name;\n        this.axios.post(`http://localhost:8080/register/widget?auth_token=${this.authToken}&widget_id=${this.widgets[x].id}&widget_type=${this.widgets[x].type}&widget_name=${this.widgets[x].name}&widget_data=${this.widgets[x].data}`);\n      }\n    },\n    toggleDeezerLastSongs() {\n      if (this.deezerToken === 0) {\n        return;\n      }\n      this.deezerLastSongsState = 'is-active';\n    },\n    updateDeezerLastSongs(res) {\n      this.configWidgetId = '';\n      this.deezerLastSongsState = res.state;\n      if (res.id !== \"none\" && res.config === '') {\n        var widget = new Widget('deezerLastSongs', res.id, res.name, 0);\n\n        this.widgets.unshift(widget);\n        this.axios.post(`http://localhost:8080/register/widget?auth_token=${this.authToken}&widget_id=${widget.id}&widget_type=${widget.type}&widget_name=${widget.name}&widget_data=${widget.data}`);\n      }\n      if (res.id !== 'none' && res.config !== '') {\n        var x = this.widgets.map(function(e) { return e.id; }).indexOf(res.config);\n\n        this.widgets[x].data = res.id;\n        this.widgets[x].name = res.name;\n        this.axios.post(`http://localhost:8080/register/widget?auth_token=${this.authToken}&widget_id=${this.widgets[x].id}&widget_type=${this.widgets[x].type}&widget_name=${this.widgets[x].name}&widget_data=${this.widgets[x].data}`);\n      }\n    },\n    toggleDeezerTopTracks() {\n      if (this.deezerToken === 0) {\n        return;\n      }\n      this.deezerTopTracksState = 'is-active';\n    },\n    updateDeezerTopTracks(res) {\n      this.configWidgetId = '';\n      this.deezerTopTracksState = res.state;\n      if (res.id !== \"none\" && res.config === '') {\n        var widget = new Widget('deezerTopTracks', res.id, res.name, 0);\n\n        this.widgets.unshift(widget);\n        this.axios.post(`http://localhost:8080/register/widget?auth_token=${this.authToken}&widget_id=${widget.id}&widget_type=${widget.type}&widget_name=${widget.name}&widget_data=${widget.data}`);\n      }\n      if (res.id !== 'none' && res.config !== '') {\n        var x = this.widgets.map(function(e) { return e.id; }).indexOf(res.config);\n\n        this.widgets[x].data = res.id;\n        this.widgets[x].name = res.name;\n        this.axios.post(`http://localhost:8080/register/widget?auth_token=${this.authToken}&widget_id=${this.widgets[x].id}&widget_type=${this.widgets[x].type}&widget_name=${this.widgets[x].name}&widget_data=${this.widgets[x].data}`);\n      }\n    },\n    toggleDeezerRelatedArtists() {\n      if (this.deezerToken === 0) {\n        return;\n      }\n      this.deezerRelatedArtistsState = 'is-active';\n    },\n    updateDeezerRelatedArtists(res) {\n      this.configWidgetId = '';\n      this.deezerRelatedArtistsState = res.state;\n      if (res.id !== \"none\" && res.config === '') {\n        var widget = new Widget('deezerRelatedArtists', res.id, res.name, 0);\n\n        this.widgets.unshift(widget);\n        this.axios.post(`http://localhost:8080/register/widget?auth_token=${this.authToken}&widget_id=${widget.id}&widget_type=${widget.type}&widget_name=${widget.name}&widget_data=${widget.data}`);\n      }\n      if (res.id !== 'none' && res.config !== '') {\n        var x = this.widgets.map(function(e) { return e.id; }).indexOf(res.config);\n\n        this.widgets[x].data = res.id;\n        this.widgets[x].name = res.name;\n        this.axios.post(`http://localhost:8080/register/widget?auth_token=${this.authToken}&widget_id=${this.widgets[x].id}&widget_type=${this.widgets[x].type}&widget_name=${this.widgets[x].name}&widget_data=${this.widgets[x].data}`);\n      }\n    },\n    //\n    //  Widget's tweaks\n    //\n    modifyWidget(widget) {\n      this.configWidgetId = widget.id;\n      if (widget.type === 'spotifyLastSongs') {\n        this.toggleSpotifyLastSongs();\n      }\n      if (widget.type === 'spotifyTopTracks') {\n        this.toggleSpotifyTopTracks();\n      }\n      if (widget.type === 'spotifyRelatedArtists') {\n        this.toggleSpotifyRelatedArtists();\n      }\n      if (widget.type === 'deezerLastSongs') {\n        this.toggleDeezerLastSongs();\n      }\n      if (widget.type === 'deezerTopTracks') {\n        this.toggleDeezerTopTracks();\n      }\n      if (widget.type === 'deezerRelatedArtists') {\n        this.toggleDeezerRelatedArtists();\n      }\n    },\n    moveDownWidget(widget) {\n      var x = this.widgets.map(function(e) { return e.id; }).indexOf(widget.id);\n\n      if (x === this.widgets.length - 1) {\n        return;\n      }\n      this.widgets[x] = this.widgets.splice(x + 1, 1, this.widgets[x])[0];\n    },\n    moveUpWidget(widget) {\n      var x = this.widgets.map(function(e) { return e.id; }).indexOf(widget.id) - 1;\n\n      if (x === -1) {\n        return;\n      }\n      this.widgets[x] = this.widgets.splice(x + 1, 1, this.widgets[x])[0];\n    },\n    deleteWidget(widget) {\n      var x = this.widgets.map(function(e) { return e.id; }).indexOf(widget.id);\n\n      this.axios.post(`http://localhost:8080/remove/widget?widget_id=${this.widgets[x].id}`);\n      this.widgets.splice(x, 1);\n    }\n  },\n}\n</script>\n\n<style>\n.widget-link {\n  font-weight: bold;\n  color:#00d1b2 !important;\n}\n\n.widget-link:hover {\n background-color: #323233 !important;\n}\n\n.widget-link:after {\n  content: \"+\";\n  float: right;\n}\n\n.widget {\n  padding: 20px;\n  margin-top: 20px !important;\n}\n\n.border {\n  border: 1px solid #404040;\n}\n\n</style>"]}]}